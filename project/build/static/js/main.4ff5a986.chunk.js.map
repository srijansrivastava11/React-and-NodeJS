{"version":3,"sources":["Components/TableContacts/TableRow/TableRow.jsx","Components/TableContacts/FormContact/FormContact.jsx","Components/TableContacts/Table/Table.jsx","services.js","Components/Logout.jsx","Components/Login.jsx","App.js","serviceWorker.js","index.js"],"names":["TableRow","props","firstname","lastname","email","phone","className","onClick","handleDelete","FormContact","useState","newContact","setNewContact","random","replace","c","r","Math","toString","handleChange","event","value","target","name","handleClear","onSubmit","preventDefault","length","handleAdd","id","onChange","type","placeholder","required","pattern","title","Table","user","contacts","setContacts","username","setUsername","search","setSearch","setError","filteredContacts","filter","contact","startsWith","fetch","method","catch","Promise","reject","error","then","response","ok","deleteContact","err","GetFormContacts","code","json","result","formContacts","useEffect","obj","contactInfo","body","JSON","stringify","headers","Headers","map","key","Logout","onLogout","isLoggedIn","Login","onLogin","loginUser","setLoginUser","loginPassword","setLoginPassword","document","querySelector","style","display","remove","password","fetchLogIn","userInfo","App","pageBody","userState","setUserState","userName","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.4ff5a986.chunk.js","sourcesContent":["import React from 'react';\n\nimport './TableRow.css';\n\nfunction TableRow(props) {\n\n    return (\n        <tr>\n            <td>{`${props.firstname}`}</td>\n            <td>{`${props.lastname}`}</td>\n            <td>{`${props.email}`}</td>\n            <td>{`${props.phone}`}</td>\n            <td>\n                <button className=\"btn-outline-danger rounded \" onClick={props.handleDelete}>Delete</button>\n            </td>\n        </tr>\n    );\n}\n\nexport default TableRow;\n","import React from 'react';\nimport {useState} from 'react';\nimport './FormContact.css';\n\nconst FormContact = (props) => {\n    const [newContact,\n        setNewContact] = useState({firstname: '', lastname: '', email: '', phone: ''});\n\n    const createUUID = () => {\n          return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n          var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\n          return v.toString(16);\n       });\n    }\n\n    let random = createUUID();\n\n    const handleChange = (event) => {\n        const value = event.target.value;\n        setNewContact({\n            ...newContact,\n            [event.target.name]: value\n        })\n    }\n\n    // Clear Form contact\n    const handleClear = () => {\n        setNewContact({firstname: '', lastname: '', email: '', phone: ''})\n    }\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        if (newContact.firstname.length > 0 && newContact.lastname.length > 0 && newContact.email.length > 0 && newContact.phone.length > 0) {\n            props.handleAdd({\n                ...newContact,\n                id: random,\n            })\n            handleClear();\n        }\n    }\n\n    return (\n        <div>\n        {/* Form Contacts */}\n            <form  onSubmit={handleSubmit}>\n                <div className=\"row\">\n                    <div></div>\n                    <div className=\"col \">\n                        <div className=\"contactForm\">\n                            <label>Name:</label>\n                            <input\n                                className=\"form-control\"\n                                name={\"firstname\"}\n                                id=\"name\"\n                                value={newContact.firstname}\n                                onChange={handleChange}\n                                type=\"text\"\n                                placeholder=\"Enter name of contact\"\n                                required\n                                pattern=\".{4,}\"\n                                title=\"Please enter at least 4 characters.\"/>\n                        </div>\n                        <div className=\"contactForm\">\n                            <label>Lastname:</label>\n                            <input\n                                className=\"form-control\"\n                                name={\"lastname\"}\n                                id=\"lastname\"\n                                value={newContact.lastname}\n                                onChange={handleChange}\n                                type=\"text\"\n                                placeholder=\"Enter surname of contact\"\n                                required/>\n                        </div>\n                    </div>\n                    <div className=\"col\">\n                        <div className=\"contactForm\">\n                            <label>Email:</label>\n                            <input\n                                className=\"form-control\"\n                                name={\"email\"}\n                                id=\"email\"\n                                value={newContact.email}\n                                onChange={handleChange}\n                                type=\"email\"\n                                placeholder=\"Enter email of contact\"\n                                required/>\n                        </div>\n                        <div className=\"contactForm\">\n                            <label>Phone:</label>\n                            <input\n                                className=\"form-control\"\n                                name={\"phone\"}\n                                id=\"phone\"\n                                value={newContact.phone}\n                                onChange={handleChange}\n                                type=\"tel\"\n                                placeholder=\"Enter phone of contact\"\n                                required\n                                />\n                        </div>\n\n                    </div>\n                        <div>\n                            <div>\n\n                                <button className=\"btn-success saveBtn\" type=\"submit\">Save Contact</button>\n                            </div>\n                            <div>\n                                <button className=\"btn-outline-secondary clearBtn\" onClick={handleClear} type=\"reset\">Clear</button>\n                            </div>\n                        </div>\n                        <div ></div>\n\n                </div>\n\n            </form>\n        </div>\n    );\n}\n\nexport default FormContact;\n","import React, { useState, useEffect } from 'react';\n\nimport TableRow from '../TableRow/TableRow';\nimport FormContact from '../FormContact/FormContact';\nimport {fetchContacts, sendContact, deleteContact} from \"../../../services\";\n\nimport './Table.css';\n\n\nfunction Table({ user }){\n    const [contacts, setContacts] = useState([]);\n    const [username, setUsername] = useState('');\n    const [search, setSearch] = useState('');\n    const [error, setError] = useState('');\n     // console.log(\"contacts\",contacts);\n    const handleChange = (event) => {\n        setSearch(event.target.value);\n    }\n    let filteredContacts = contacts.filter(contact =>\n           contact.phone.startsWith(search)\n        || contact.firstname.startsWith(search)\n        || contact.lastname.startsWith(search));\n\n\n    // Add Contact to Table\n    const handleAdd = (obj) =>{\n      setContacts([...contacts , obj]);\n      filteredContacts = contacts;\n      sendContact(obj)\n        .then(() => {\n      })\n      .catch((err) => {\n        setError(err.error);\n      });\n\n    }\n\n    //Delete Contact\n    const handleDelete = (id) => {\n        setContacts([...contacts.filter(contact => contact.id !== id)]);\n        filteredContacts = contacts;\n        deleteContact(id)\n          .then(() => {\n        })\n        .catch((err) => {\n          setError(err.error);\n        });\n    }\n\n    const GetFormContacts = ({ setContacts, setError }) => {\n        fetchContacts()\n          .then(formContacts => {\n            setContacts(formContacts.contacts);\n            setUsername(formContacts.username);\n            filteredContacts = contacts;\n          })\n          .catch(err => {\n            setError(err.error);\n          });\n      };\n    useEffect(() => {\n      GetFormContacts({ setContacts, setError });\n    }, []);\n    return (\n\n        <div className=\"container\">\n        <div className=\"header\">WELCOME</div>\n         <div className=\"second-header\">\n           { username}\n         </div>\n            <div className=\"row \">\n                <div className=\"col \">\n                    <div className=\"row justify-content-center fixBox\">\n                        <input\n                            className=\"searchBar\"\n                            name={'search'}\n                            value={search}\n                            onChange={handleChange}\n                            placeholder=\"Search by Name or Phone\"\n                        />\n                        <span><i className=\"fa fa-search\"/></span>\n                    </div>\n\n                </div>\n            </div>\n            <div className=\"formBox\">\n                <FormContact handleAdd={handleAdd}/>\n            </div>\n            <div className=\"row justify-content-center contentTable\">\n                <div className=\"col\">\n                    <table className=\"table table-hover\">\n                        <thead className=\"headerColor\">\n                            <tr className=\"\">\n                                <th>Name</th>\n                                <th>Lastname</th>\n                                <th>Email</th>\n                                <th>Phone</th>\n                                <th>Action</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                        {filteredContacts.map(contact=>(\n                                                        <TableRow\n                                                            key={contact.id}\n                                                            firstname={contact.firstname}\n                                                            lastname={contact.lastname}\n                                                            email={contact.email}\n                                                            phone={contact.phone}\n                                                            handleDelete={()=>handleDelete(contact.id)}\n                                                        />\n                                                    ))}\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </div>\n  )\n}\n\nexport default Table;\n","export const fetchLogIn = (username, password=null) => {\r\n    return fetch('/session', {\r\n        method: 'POST',\r\n        headers: new Headers({\r\n            'content-type': 'application/json',\r\n        }),\r\n        body: JSON.stringify({\r\n            username,\r\n            password\r\n        }),\r\n    })\r\n        .catch(() => {\r\n            return Promise.reject({\r\n                code: 'network-error'\r\n            });\r\n        })\r\n        .then((response) => {\r\n            if (!response.ok) {\r\n                return response.json().then(result => Promise.reject(result));\r\n            }\r\n            return response.json();\r\n        });\r\n};\r\n\r\nexport const fetchLoginStatus = () => {\r\n    return fetch('/session', {\r\n        method: 'GET',\r\n    })\r\n        .catch(() => {\r\n            return Promise.reject({\r\n                code: 'network-error'\r\n            });\r\n        })\r\n        .then((response) => {\r\n            if (!response.ok) {\r\n                return Promise.reject({\r\n                    code: 'login-invalid'\r\n                });\r\n            }\r\n            return response.json();\r\n        });\r\n};\r\n\r\nexport const fetchLogOut = () => {\r\n    return fetch('/session', {\r\n        method: 'DELETE'\r\n    })\r\n        .catch(() => {\r\n            return Promise.reject({\r\n                code: 'network-error'\r\n            });\r\n        })\r\n        .then((response) => {\r\n            if (!response.ok) {\r\n                return response.json().then(result => Promise.reject(result));\r\n            }\r\n            return response.json();\r\n        });\r\n};\r\n\r\nexport const sendContact = (contactInfo) => {\r\n    return fetch('/contactDetails', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n            'contactInfo': contactInfo\r\n        }),\r\n        headers: new Headers({\r\n            'content-type': 'application/json'\r\n        })\r\n    })\r\n        .catch(() => Promise.reject({\r\n            error: 'network-error'\r\n        }))\r\n        .then((response) => {\r\n            if (!response.ok) {\r\n                return response.json().then(result => Promise.reject(result));\r\n            }\r\n            return response.json();\r\n        });\r\n};\r\n\r\nexport const fetchContacts = () => {\r\n    return fetch('/contactDetails', {\r\n        method: 'GET',\r\n    })\r\n        .catch(() => {\r\n            return Promise.reject({\r\n                code: 'network-error'\r\n            });\r\n        })\r\n        .then((response) => {\r\n            if (!response.ok) {\r\n                return response.json().then(result => Promise.reject(result));\r\n            }\r\n            return response.json();\r\n        });\r\n\r\n};\r\n\r\nexport const deleteContact = (id) => {\r\n  return fetch(`/contactDetails/${id}`, {\r\n    method: 'DELETE',\r\n  })\r\n  .catch(() => Promise.reject({\r\n      error: 'network-error'\r\n  }))\r\n  .then( response => {\r\n    return response.ok;\r\n  });\r\n};\r\n","import React from 'react';\r\n\r\nimport { fetchLogOut } from '../services';\r\n\r\nconst Logout = ({ user, onLogout }) => {\r\n\r\n  const onlogout = () => {\r\n    fetchLogOut()\r\n      .then(() => onLogout());\r\n  };\r\n  return (\r\n    <ul >\r\n      {user.isLoggedIn ?\r\n        <div>\r\n          <button className=\"btn-logout\" type=\"button\" onClick={onlogout}>Logout</button>\r\n        </div> : \"\"}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default Logout;\r\n","import React, { useState } from 'react';\r\nimport { fetchLogIn } from '../services';\r\n\r\nconst Login = ({ user, onLogin }) => {\r\n\r\n  const [loginUser, setLoginUser] = useState('');\r\n  const [error, setError] = useState('');\r\n  const [loginPassword, setLoginPassword] = useState('');\r\n\r\n  const onInput = (event) => {\r\n    const name = event.target.value\r\n    setLoginUser(name);\r\n  }\r\n\r\n  const onPassword = (event) => {\r\n    const password = event.target.value\r\n    setLoginPassword(password);\r\n  }\r\n\r\n  const createLogin = () => {\r\n    fetchLogIn(loginUser, loginPassword)\r\n      .then((userInfo) => {\r\n        onLogin(userInfo);\r\n      })\r\n      .catch((err) => {\r\n        setError(err.error);\r\n      });\r\n  }\r\n  const createAdminLogin = () => {\r\n      document.querySelector(\".password\").style.display = \"inline-block\";\r\n      document.querySelector(\".admin-login\").remove();\r\n  }\r\n\r\n  return (\r\n    <div className='container'>\r\n      <div className=\"title\">\r\n        Welcome to Contacts Management System, Please Login with your details\r\n      </div>\r\n      <div className=\"admin-div\">\r\n        <button className=\"create admin-login\" type=\"button\" onClick={createAdminLogin} >Admin Login</button>\r\n      </div>\r\n      <div className=\"heading\">\r\n        Enter Username\r\n      </div>\r\n        <input className=\"username\" name=\"text\" type=\"text\"\r\n          onChange={onInput}\r\n          value={loginUser}\r\n          placeholder=\"Username\"\r\n        />\r\n        <br/>\r\n          <input type=\"password\" className=\"password\" name=\"password\" onChange={onPassword} value={loginPassword} placeholder=\"Password\" /><br/>\r\n          <button className=\"create\" type=\"button\" onClick={createLogin} >Login</button>\r\n        <div className=\"error-msg\">\r\n          {error}\r\n        </div>\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\n\r\nexport default Login;\r\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Table from './Components/TableContacts/Table/Table';\nimport Logout from './Components/Logout';\nimport Login from './Components/Login';\nimport { fetchLoginStatus } from './services'\n\nfunction App() {\n  const [userState, setUserState] = useState({ isLoggedIn: false });\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    fetchLoginStatus()\n      .then(userInfo => {\n        setUserState({\n          isLoggedIn: true,\n          username: userInfo.userName\n        });\n      })\n      .catch((err) => {\n        setError(err.error);\n        setUserState({\n          isLoggedIn: false\n        })\n      });\n  }, []);\n\n  const onLogin = (userInfo) => {\n    setUserState({\n     isLoggedIn: true,\n     username: userInfo.username\n    });\n   };\n\n  const onlogout = () => {\n    setUserState({\n      isLoggedIn: false\n    });\n  };\n\n  let pageBody;\n  if(userState.isLoggedIn) {\n    pageBody = <Table user={userState} error={error} />;\n  }\n  else {\n    pageBody = <Login onLogin={onLogin}/>;\n  }\n\n\n  return (\n    <div className=\"backgroundImage\">\n    <div className=\"App\">\n      <Logout user={userState} onLogout={onlogout} />\n      {pageBody}\n    </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}