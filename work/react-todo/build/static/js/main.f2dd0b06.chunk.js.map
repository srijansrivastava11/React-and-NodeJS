{"version":3,"sources":["services.js","messages.js","components/TodoItem.jsx","components/TodoInput.jsx","components/Filter.jsx","components/Sort.jsx","components/Theme.jsx","components/TodoList.jsx","components/Nav.jsx","components/Login.jsx","App.jsx","serviceWorker.js","index.js"],"names":["convertNetworkError","err","code","convertServiceError","Promise","reject","messages","DEFAULT","USERNAME_REQUIRED","NETWORK_ERROR","LOGIN_REQUIRED","LOGIN_UNAUTHORIZED","ITEM_REQUIRED","TodoItem","item","inputTask","user","useState","setError","title","setTitle","edit","setEdit","EditTask","update","task","username","fetch","taskId","method","headers","Headers","body","JSON","stringify","catch","then","response","ok","json","fetchEditTask","className","type","checked","onChange","value","e","target","onClick","res","TodoInput","setTask","error","placeholder","fetchPostTask","Filter","filter","setFilter","Sort","sort","setSort","disabled","Theme","themeChoice","selectTheme","map","theme","key","indexOf","TodoList","todos","setTodos","order","setOrder","setTheme","data","useEffect","fetchUpdateTheme","Object","keys","taskone","tasktwo","todo","Nav","onLogout","isLoggedIn","Login","onLogin","setUsername","isLoading","setIsLoading","fetchLogin","App","userState","setUserState","userInfo","pageBody","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.f2dd0b06.chunk.js","sourcesContent":["const convertNetworkError = (err) => {\n    return {\n      code: 'NETWORK-ERROR',\n      err\n    };\n  };\n  \n  const convertServiceError = (err) => Promise.reject(err);\n  \n  export const fetchLoginStatus = (username) => {\n    return fetch('/session', {\n      method: 'GET',\n    })\n    .catch( convertNetworkError )\n    .then( response => {\n      if(!response.ok) {\n       \n        return response.json().then(convertServiceError);\n      }\n      return response.json();\n    });\n  };\n\n  \n  export const fetchDeleteTasks = (username) => {\n    return fetch(`/tasks/${username}`, {\n      method: 'DELETE',\n    })\n    .catch( convertNetworkError)\n    .then( response => {\n\n      return response.ok;\n    });\n  };\n\n  export const fetchDeleteTask = (username, taskId) => {\n    return fetch(`/tasks/${username}/${taskId}`, {\n      method: 'DELETE',\n    })\n    .catch( convertNetworkError)\n    .then( response => {\n        return response.ok;\n    });\n  };\n\n\n  export const fetchTasks = () => {\n    return fetch('/items', {\n      method: 'GET',\n    })\n    .catch( convertNetworkError )\n    .then( response => {\n      if(!response.ok) {\n        return response.json().then(convertServiceError);\n      }\n      return response.json();\n    });\n  };\n\n  export const fetchGetTask = (username) => {\n    return fetch(`/tasks/${username}`, {\n      method: 'GET',\n    })\n    .catch( convertNetworkError )\n    .then( response => {\n      if(!response.ok) {\n        return response.json().then(convertServiceError);\n      }\n      return response.json();\n    });\n  };\n\n  export const fetchPostTask = (username,task) => {\n    return fetch(`/tasks/${username}`, {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json',\n      },\n      body: JSON.stringify({task}),\n    })\n    .catch( convertNetworkError )\n    .then( response => {\n      if(!response.ok) {\n        return response.json().then(convertServiceError);\n      }\n      return response.json();\n    });\n  };\n\n  export const fetchUpdateTheme = (username,theme) => {\n    return fetch(`/theme/${username}`, {\n      method: 'PUT',\n      headers: {\n        'content-type': 'application/json',\n      },\n      body: JSON.stringify({theme}),\n    })\n    .catch( convertNetworkError )\n    .then( response => {\n      if(!response.ok) {\n        return response.json().then(convertServiceError);\n      }\n      return response.json();\n    });\n  };\n\n  export const fetchEditTask = (username,task) => {\n    return fetch(`/tasks/${username}/${task.taskId}`, {\n      method: 'PUT',\n      headers: new Headers({\n        'content-type': 'application/json',\n      }),\n      body: JSON.stringify({ task}),\n    })\n    .catch( convertNetworkError )\n    .then( response => {\n      if(!response.ok) {\n        return response.json().then(convertServiceError);\n      }\n      return response.json();\n    });\n  };\n  \n  export const fetchLogin = (username) => {\n    return fetch('/session', {\n      method: 'POST',\n      headers: new Headers({\n        'content-type': 'application/json',\n      }),\n      body: JSON.stringify({ username }),\n    })\n    .catch( convertNetworkError )\n    .then( response => {\n      if(!response.ok) {\n        return response.json().then( convertServiceError );\n      }\n      return response.json();\n    });\n  };\n\n  export const fetchLogout = () => {\n    return fetch('/session', {\n      method: 'DELETE',\n    })\n    .catch( convertNetworkError)\n    .then( response => {\n\n      return response.ok;\n    });\n  };","const messages = {\n    DEFAULT: 'Oh no!  Something went wrong, please try again',\n    USERNAME_REQUIRED: 'Username is required',\n    NETWORK_ERROR: 'There was a problem reaching your network, please try again',\n    LOGIN_REQUIRED: 'You must be logged in to view this content',\n    LOGIN_UNAUTHORIZED: 'You are not permitted to view this content',\n    ITEM_REQUIRED:'Task is required',\n  };\n  \n  export default messages;","import React, { useState } from 'react';\nimport messages from '../messages';\nimport {fetchDeleteTask, fetchEditTask} from '../services';\n\nconst TodoItem = ({item,inputTask,user}) =>  {\n  const [error, setError] = useState('');\n  const [title, setTitle] = useState(item.title);\n  const [edit, setEdit] = useState(false);\n\n  const DeleteItem= () => {\n    setError('');\n    fetchDeleteTask(user.username,item.taskId)\n    .then( (res) => {\n       inputTask();\n    })\n    .catch( (err) => {\n       setError(messages[err.code || 'DEFAULT']);\n    });\n  };\n\n  const EditTask = update => {\n    const task = {\n      ...item,\n      ...update,\n      title\n    }\n    setEdit(false);\n    fetchEditTask(user.username, task)\n    .then( () => {\n      inputTask();\n    })\n    .catch( (err) => {\n      setError(messages[err.code || 'DEFAULT']);\n    });\n  };\n\n  const onTodoClick =() => {\n    EditTask({checked: !item.checked})\n  }\n\n  const renderTitle =() => {\n    if(edit){\n      return <input value={title} onChange= { (e) => setTitle(e.target.value)}/>\n    }\n    return <span className=\"task-title\">{title}</span>\n  }\n\n  const renderButton =() => {\n    if(!edit){\n      return  <button className=\"update-button btn\"  onClick={()=> setEdit(true)} >Edit</button>\n    }\n    return <button className=\"update-button btn\"  onClick={()=> EditTask()}>Save</button>\n  }\n\n  return(\n    <li>\n        <div className=\"todo-display\">\n        <input type=\"checkbox\"\n               checked={!!item.checked}\n               onChange={() => onTodoClick(item)} />\n          {renderTitle()}\n            <button className=\"delete btn\"  onClick={DeleteItem}>Delete</button>\n           {renderButton()}\n        </div>\n    </li>\n  );\n}\n\nexport default TodoItem;\n","import React, { useState } from \"react\";\nimport {fetchPostTask} from '../services';\nimport messages from '../messages';\n\nconst TodoInput = ({user,inputTask}) =>  {\n    const [task, setTask] = useState('');\n    const [error, setError] = useState('');\n\n    const AddTask = () => {\n        if(!task) {\n            setError(messages.ITEM_REQUIRED);\n            return;\n        }\n        setError('');\n        if(user.username){\n            fetchPostTask(user.username,{title:task})\n            .then( (res) => {\n                inputTask();\n                setTask('');\n            })\n            .catch( (err) => {\n            setError(messages[err.code || 'DEFAULT']);\n            });\n        }\n    };\n\n    return (\n        <div className=\"todo-container\">\n             <p className=\"error\">{error}</p>\n            <input className=\"todo-input\" value={task} placeholder=\"Enter Task\"  onChange= { (e) => setTask(e.target.value)}/>\n            <button className=\"btn-todo-add\" onClick={ AddTask }>Add</button>\n        </div>\n    );\n};\n\n\nexport default TodoInput;\n","import React from \"react\";\n\nconst Filter = ({ filter, setFilter }) => {\n\nreturn (\n  <div className=\"filter-todos\">\n    <span className=\"filter-container\">\n      <label className=\"task-filter-label\">Filter By:</label>\n      <select\n        className=\"filter-task filter-height\"\n        value={filter}\n        onChange={ (e) => setFilter(e.target.value)}\n      >\n      <option value='0'>All Tasks</option>\n      <option value='1'>Task Completed</option>\n      <option value='-1'>Task Not Completed</option>\n      </select>\n    </span>\n  </div>\n);\n};\n\nexport default Filter;\n","import React from \"react\";\n\nconst Sort = ({ sort, setSort }) => {\n\n  return (\n    <span className=\"sort-container\">\n      <label className=\"task-sort-label\">Sort By:</label>\n      <span className=\"select-sort\">\n        <label> Name</label>\n        <select\n          className=\"sort-alphabetically filter-height\"\n          value={sort}\n          onChange={ (e) => setSort(e.target.value)}>\n          <option value=\"select option\" disabled>\n            Select\n          </option>\n          <option value='0'>Default</option>\n          <option value='1'>Tasks in Ascending Order</option>\n          <option value='-1'>Tasks in Descending Order</option>\n        </select>\n\n      </span>\n    </span>\n  );\n};\n\n\nexport default Sort;\n","import React from \"react\";\n\nconst Theme = ({themeChoice,selectTheme}) =>{\n    return (\n        <div className=\"theme\">\n            <label> Theme: </label>\n            <select onChange={(e)=> {selectTheme(e.target.value)}}>\n                {themeChoice.map(theme => (\n                        <option key={themeChoice.indexOf(theme)}>{theme}</option>\n                    ))}\n            </select>\n        </div>\n    )\n}\nexport default Theme;\n","import React,{useState, useEffect} from \"react\";\nimport TodoItem from \"./TodoItem\";\nimport { fetchGetTask,fetchDeleteTasks, fetchUpdateTheme} from \"../services\";\nimport TodoInput from './TodoInput';\nimport Filter from './Filter';\nimport Sort from './Sort';\nimport Theme from './Theme';\n\nconst TodoList = ({ user }) => {\n\n  const [todos,setTodos] = useState({});\n  const [order, setOrder] = useState(0);\n  const [filter, setFilter] = useState(0);\n  const [theme,setTheme] = useState('');\n  const themeOptions = ['Dark','Light','Colorful'];\n\n  const sortTasks= (taskone, tasktwo) => {\n    const firstTask = todos[taskone].title;\n    const secondTask = todos[tasktwo].title;\n\n    if(firstTask > secondTask ) {\n      return order;\n    }\n    return -order;\n  }\n\n  const filterStatus = key => {\n    const todo = todos[key];\n    switch(filter) {\n      case '-1': return !todo.checked;\n      case '1': return !!todo.checked;\n      default: return true;\n    }\n  }\n\n  const inputTask = ()=> {\n    fetchGetTask(user.username)\n    .then(({data}) =>\n      setTodos(data)\n    )\n  }\n\n  const updateTheme = (theme)=> {\n    fetchUpdateTheme(user.username,theme)\n    .then(() =>\n       setTheme(theme)\n    )\n  }\n\n  const setClassName = () => {\n    if (theme === \"Light\") {\n      return \"light\";\n    } else if (theme === \"Colorful\") {\n      return \"colorful\";\n    } else {\n      return \"dark\";\n    }\n  };\n\n  const clearList =()=>{\n    fetchDeleteTasks(user.username)\n    .then(() => setTodos({}))\n  }\n\n  useEffect( inputTask, []);\n    return (\n      <div className={setClassName()}>\n        <div className=\"header\">WELCOME</div>\n        <div className=\"second-header\">\n          { user.username},Just to-do it\n        </div>\n        <Sort sort={order} setSort={setOrder} />\n        <Filter filter={filter} setFilter={setFilter} />\n        <Theme  selectTheme={updateTheme} themeChoice={themeOptions}  />\n        <TodoInput inputTask={inputTask} user={user} />\n        <button className=\"clear-list\" onClick={clearList}>Clear List</button>\n        <button className=\"btn-refresh\" onClick={inputTask}>Refresh</button>\n        <ul>\n          {Object.keys(todos).sort(sortTasks)\n                             .filter(filterStatus)\n                             .map(key => {\n                                const item = todos[key];\n                                return <TodoItem key={item.taskId} item={item} inputTask={inputTask} user={user}  />;\n          })}\n        </ul>\n      </div>\n    );\n  }\n\nexport default TodoList;\n","import React from 'react';\nimport { fetchLogout } from '../services';\n\nconst Nav = ({ user, onLogout }) => {\n  const logout = () => {\n    fetchLogout()\n    .then( () => onLogout() );\n  };\n  return (\n    <div className='nav'>\n      { user.isLoggedIn &&\n          <button\n            className=\"logout action\"\n            onClick={logout}\n          >Logout</button> }\n    </div>\n  );\n};\n\nexport default Nav;\n","import React, { useState } from 'react';\nimport { fetchLogin } from '../services';\nimport messages from '../messages';\n\n\nconst Login = ({ onLogin }) => {\n\n  const [username, setUsername] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  const performLogin = () => {\n    if(!username) {\n      setError(messages.USERNAME_REQUIRED);\n      return;\n    }\n\n    setError('');\n    setIsLoading(true);\n\n    fetchLogin(username)\n    .then( () => {\n      onLogin(username);\n    })\n    .catch( (err) => {\n      setError(messages[err.code || 'DEFAULT']);\n      setIsLoading(false);\n    });\n  };\n\n  return (\n    <div className=\"login\">\n      <p className=\"error\">{error}</p>\n      <h1>Login</h1>\n      <input className = \"user-info\" placeholder =\"Enter Username\"onChange={ (e) => setUsername(e.target.value) }/>\n      { isLoading ?\n        <span>Loading......</span> :\n          <button className = \"to-login\" onClick={ performLogin }>Login</button>\n      }\n    </div>\n  );\n};\n\nexport default Login;\n","\nimport React, { useState, useEffect } from 'react';\nimport { fetchLoginStatus } from './services';\nimport TodoList from './components/TodoList';\nimport Nav from './components/Nav';\nimport Login from './components/Login';\nimport './App.css';\n\n\nconst App = () => {\n  const [userState, setUserState] = useState({ isLoggedIn: false});\n\n  useEffect( () => {\n    fetchLoginStatus()\n    .then( userInfo => {\n\n      setUserState({\n        isLoggedIn: true,\n        username: userInfo.data[\"username\"],\n      });\n    })\n  }, []);\n\n  const login = (username) => {\n    setUserState({\n      isLoggedIn: true,\n      username\n    }\n    );\n  };\n\n  const logout = () => {\n    setUserState({\n      isLoggedIn: false\n    });\n  };\n\n  let pageBody;\n\n  if(userState.isLoggedIn) {\n\n    pageBody = ( <div className=\"display-panel\">\n                    <TodoList user={userState} key=\"TodoList\"/>\n                </div>)\n  } else {\n    pageBody = <Login onLogin={ login }/>;\n  }\n\n  return (\n    <div className=\"app\">\n        {pageBody}\n        <Nav user={userState} onLogout={logout}/>\n    </div>\n  );\n};\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}