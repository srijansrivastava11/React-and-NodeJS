{"version":3,"sources":["services.js","Components/Login.jsx","Components/Welcome.jsx","Components/ChatMessages.jsx","Components/MessageSend.jsx","Components/ChatPage.jsx","Components/Portal.jsx","Components/Logout.jsx","App.js","index.js"],"names":["fetchPostAvailableUsers","fetch","method","body","JSON","stringify","headers","Headers","catch","Promise","reject","error","then","response","ok","json","result","Login","user","onLogin","useState","loginUser","setLoginUser","setError","className","name","type","onChange","event","target","value","onClick","username","code","userInfo","err","Welcome","isStarted","setStarted","ChatMessages","messagelist","Object","keys","length","chatList","chats","map","message","key","timestamp","MessageSend","getMessage","GetchatList","setMessageList","newMessage","setNewMessage","ChatPage","messages","useEffect","intervalId","setInterval","clearInterval","id","msg","Portal","chatPageRender","setChatPageRender","clientError","setclientError","UserList","setUserList","userslist","userList","values","data","Logout","onLogout","isLoggedIn","App","pageBody","userState","setUserState","userName","setUserName","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f18fef8d.chunk.js","sourcesContent":["export const fetchLogIn = (username) => {\r\n    return fetch('/session', {\r\n        method: 'POST',\r\n        headers: new Headers({\r\n            'content-type': 'application/json',\r\n        }),\r\n        body: JSON.stringify({\r\n            username\r\n        }),\r\n    })\r\n        .catch(() => {\r\n            return Promise.reject({\r\n                code: 'network-error'\r\n            });\r\n        })\r\n        .then((response) => {\r\n            if (!response.ok) {\r\n                return response.json().then(result => Promise.reject(result));\r\n            }\r\n            return response.json();\r\n        });\r\n};\r\n\r\nexport const fetchLoginStatus = () => {\r\n    return fetch('/session', {\r\n        method: 'GET',\r\n    })\r\n        .catch(() => {\r\n            return Promise.reject({\r\n                code: 'network-error'\r\n            });\r\n        })\r\n        .then((response) => {\r\n            if (!response.ok) {\r\n                return Promise.reject({\r\n                    code: 'login-invalid'\r\n                });\r\n            }\r\n            return response.json();\r\n        });\r\n};\r\n\r\nexport const fetchLogOut = () => {\r\n    return fetch('/session', {\r\n        method: 'DELETE'\r\n    })\r\n        .catch(() => {\r\n            return Promise.reject({\r\n                code: 'network-error'\r\n            });\r\n        })\r\n        .then((response) => {\r\n            if (!response.ok) {\r\n                return response.json().then(result => Promise.reject(result));\r\n            }\r\n            return response.json();\r\n        });\r\n};\r\n\r\nexport const fetchSendMessage = (msg) => {\r\n    return fetch(`/message`, {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n            'message': msg\r\n        }),\r\n        headers: new Headers({\r\n            'content-type': 'application/json'\r\n        })\r\n    })\r\n        .catch(() => Promise.reject({\r\n            error: 'network-error'\r\n        }))\r\n        .then((response) => {\r\n            if (!response.ok) {\r\n                return response.json().then(result => Promise.reject(result));\r\n            }\r\n            return response.json();\r\n        });\r\n};\r\n\r\nexport const fetchChats = () => {\r\n    return fetch('/message', {\r\n        method: 'GET',\r\n    })\r\n        .catch(() => {\r\n            return Promise.reject({\r\n                code: 'network-error'\r\n            });\r\n        })\r\n        .then((response) => {\r\n            if (!response.ok) {\r\n                return response.json().then(result => Promise.reject(result));\r\n            }\r\n            return response.json();\r\n        });\r\n\r\n};\r\n\r\nexport const fetchGetAvailableUsers = () => {\r\n    return fetch('/availableUser', {\r\n        method: 'GET',\r\n    })\r\n        .catch(() => {\r\n            return Promise.reject({\r\n                code: 'network-error'\r\n            });\r\n        })\r\n        .then((response) => {\r\n            if (!response.ok) {\r\n                return response.json().then(result => Promise.reject(result));\r\n            }\r\n            return response.json();\r\n        });\r\n\r\n};\r\n\r\nexport const fetchPostAvailableUsers = () => {\r\n    return fetch(`/availableUser`, {\r\n        method: 'POST',\r\n        body: JSON.stringify({}),\r\n        headers: new Headers({\r\n            'content-type': 'application/json'\r\n        })\r\n    })\r\n        .catch(() => Promise.reject({\r\n            error: 'network-error'\r\n        }))\r\n        .then((response) => {\r\n            if (!response.ok) {\r\n                return response.json().then(result => Promise.reject(result));\r\n            }\r\n            return response.json();\r\n        });\r\n};\r\n","import React, { useState } from 'react';\r\nimport { fetchLogIn, fetchPostAvailableUsers } from '../services';\r\n\r\nconst Login = ({ user, onLogin }) => {\r\n\r\n  const [loginUser, setLoginUser] = useState('');\r\n  const [error, setError] = useState('');\r\n\r\n  const onInput = (event) => {\r\n    const name = event.target.value\r\n    setLoginUser(name);\r\n  }\r\n\r\n  const createLogin = () => {\r\n    fetchLogIn(loginUser)\r\n      .then((userInfo) => {\r\n        onLogin(userInfo);\r\n        fetchPostAvailableUsers();\r\n      })\r\n      .catch((err) => {\r\n        setError(err.error);\r\n      });\r\n  }\r\n\r\n  return (\r\n    <div className='container'>\r\n      <div className=\"title\">\r\n        \"Welcome, Please Login with your details\"\r\n      </div>\r\n      <div className=\"heading\">\r\n        Enter Username\r\n      </div>\r\n        <input className=\"username\" name=\"text\" type=\"text\"\r\n          onChange={onInput}\r\n          value={loginUser}\r\n        />\r\n\r\n          <button className=\"create\" type=\"button\" onClick={createLogin} >Login</button>\r\n        <div className=\"status\">\r\n          {error}\r\n        </div>\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\n\r\nexport default Login;\r\n","import React, { useState } from 'react';\r\nimport Login from './Login'\r\n\r\nconst Welcome = ({ onLogin }) => {\r\n    const [isStarted, setStarted] = useState(false);\r\n\r\n    const CallLogin = () => {\r\n        setStarted(true)\r\n    }\r\n\r\n\r\n    const calSetSatart = () => {\r\n        setStarted(false);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {isStarted ?\r\n                <div>\r\n                    <button className=\"btn-home\" type=\"button\" onClick={calSetSatart}>Home</button>\r\n                    <Login onLogin={onLogin} />\r\n                </div>\r\n                :\r\n                <div className='container'>\r\n                    <div className=\"title\">\r\n                        Chat App\r\n                    </div>\r\n                    <div className=\"sub-title\">\r\n                        Get Started\r\n                    </div>\r\n                    <div className='btn-starters'>\r\n                        <button className=\"btn-start\" type=\"button\" onClick={CallLogin}>Chat</button>\r\n                        <div className=\"divider\" />\r\n                    </div>\r\n                </div>\r\n            }\r\n\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nexport default Welcome;\r\n","import React from 'react';\r\n\r\nfunction ChatMessages({ messagelist }) {\r\n    if (Object.keys(messagelist).length === 0) {\r\n        return (\r\n            <div className=\"messages\">\r\n                <h3>Messages</h3>\r\n            </div>\r\n        );\r\n    }\r\n    const chatList = messagelist.chats.map((message) =>\r\n        <p className=\"message\" key={message.timestamp}>{message.timestamp} {message.username}: {message.message}</p>)\r\n\r\n    return (\r\n        <div className=\"messages\">\r\n            <h3>Messages</h3>\r\n            <ul className=\"message-list\">\r\n                {chatList}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatMessages;\r\n","import React, { useState } from 'react'\r\n\r\nfunction MessageSend({ getMessage, GetchatList, setMessageList, error, setError }) {\r\n\r\n    const [newMessage, setNewMessage] = useState('');\r\n\r\n    const onInput = (event) => {\r\n        setNewMessage(event.target.value);\r\n    }\r\n\r\n    const sendMessage = () => {\r\n        getMessage(newMessage);\r\n        setNewMessage('');\r\n        setError('');\r\n        GetchatList({ setMessageList });\r\n    }\r\n\r\n    return (\r\n        <div className=\"outgoing\">\r\n            <input className=\"message\" name=\"text\" type=\"text\" onChange={onInput} value={newMessage} />\r\n            <button className=\"btn-msg\" type=\"button\" onClick={sendMessage}>Send</button>\r\n            <div className=\"status\">\r\n                {error}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MessageSend;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { fetchChats } from '../services'\r\nimport ChatMessages from './ChatMessages'\r\nimport MessageSend from './MessageSend'\r\nimport { fetchSendMessage } from '../services'\r\n\r\n\r\nconst ChatPage = () => {\r\n  const [messagelist, setMessageList] = useState([]);\r\n  const [error, setError] = useState('');\r\n\r\n  const GetchatList = ({ setMessageList, setError }) => {\r\n    fetchChats()\r\n      .then(messages => {\r\n        setMessageList(messages);\r\n      })\r\n      .catch(err => {\r\n        setError(err.error);\r\n      });\r\n  };\r\n\r\n  const getMessage = (newMessage) => {\r\n    fetchSendMessage(newMessage)\r\n      .then(() => {\r\n      })\r\n      .catch((err) => {\r\n        setError(err.error);\r\n      });\r\n  }\r\n\r\n  useEffect(() => {\r\n\r\n    GetchatList({ setMessageList, setError });\r\n    const intervalId = setInterval(() => {\r\n      GetchatList({ setMessageList, setError });\r\n    }, 2000);\r\n    return function cleanup() {\r\n           clearInterval(intervalId);\r\n       };\r\n  }, []);\r\n\r\n\r\n  return (\r\n    <div id=\"chat-app\">\r\n      <div className=\"title\">\r\n        Chat Application\r\n      </div>\r\n      <div className='container'>\r\n\r\n        {<MessageSend getMessage={getMessage} GetchatList={GetchatList} setMessageList={setMessageList} error={error} setError={setError} />}\r\n\r\n        <div className=\"chat-panel\">\r\n          {<ChatMessages messagelist={messagelist} />}\r\n        </div>\r\n\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ChatPage;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { fetchGetAvailableUsers, fetchPostAvailableUsers} from '../services'\r\nimport ChatPage from './ChatPage'\r\n\r\n\r\nconst Portal = () => {\r\n\r\n\r\n    const [error, setError] = useState('');\r\n    const [chatPageRender, setChatPageRender] = useState(false);\r\n    const [clientError, setclientError] = useState(\"\");\r\n    const [UserList, setUserList] = useState('');\r\n\r\n    const userslist = () => {\r\n        fetchGetAvailableUsers()\r\n            .then((userList) => {\r\n                setclientError(\"\");\r\n                setUserList(userList);\r\n            })\r\n            .catch((err) => {\r\n                setclientError(err.error);\r\n                setUserList('');\r\n            });\r\n    }\r\n\r\n    const goToChatPage = () => {\r\n      fetchPostAvailableUsers()\r\n          .then((data) => {\r\n              setChatPageRender(true);\r\n        })\r\n\r\n          .catch((err) => {\r\n              setError(err.error);\r\n          });\r\n  }\r\n\r\n\r\n    useEffect(() => {\r\n        userslist();\r\n        const intervalId = setInterval(() => {\r\n            userslist();\r\n        }, 2000);\r\n        return function cleanup() {\r\n           clearInterval(intervalId);\r\n       };\r\n    }, []);\r\n\r\n    const user = Object.values(UserList).map((user) =>\r\n\r\n            <p className=\"avail-user\" key={user.name}>{user.name}</p>\r\n\r\n    )\r\n    return (\r\n        <div>\r\n      {(chatPageRender ? <ChatPage/> :\r\n                <div>\r\n                    <div className=\"title\">\r\n                        Welcome\r\n                    </div>\r\n                    <div className='container'>\r\n                            <div className=\"users\">\r\n                            <div className=\"heading\">\r\n                              Active Users\r\n                            </div>\r\n                                <ul className=\"user-list\">\r\n                                    {user}\r\n                                </ul>\r\n                                <div className=\"status\">\r\n                                    {clientError}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <button className=\"btn-view\" type=\"button\" onClick={goToChatPage}>Start Chat</button>\r\n                        </div>\r\n                            <div className=\"status\">\r\n                                {error}\r\n                            </div>\r\n\r\n                </div>\r\n\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Portal;\r\n","import React from 'react';\r\n\r\nimport { fetchLogOut } from '../services';\r\n\r\nconst Logout = ({ user, onLogout }) => {\r\n\r\n  const onlogout = () => {\r\n    fetchLogOut()\r\n      .then(() => onLogout());\r\n  };\r\n  return (\r\n    <ul >\r\n      {user.isLoggedIn ?\r\n        <div>\r\n          <button className=\"btn-logout\" type=\"button\" onClick={onlogout}>Logout</button>\r\n        </div> : \"\"}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default Logout;\r\n","import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport Welcome from './Components/Welcome';\r\nimport Portal from './Components/Portal';\r\nimport Logout from './Components/Logout';\r\n\r\nimport { fetchLoginStatus } from './services'\r\n\r\nfunction App() {\r\n  const [userState, setUserState] = useState({ isLoggedIn: false });\r\n  const [userName, setUserName] = useState('');\r\n  const [error, setError] = useState('');\r\n\r\n  useEffect(() => {\r\n    fetchLoginStatus()\r\n      .then(userInfo => {\r\n        setUserState({\r\n          isLoggedIn: true\r\n        });\r\n        setUserName(userInfo.userName);\r\n      })\r\n      .catch((err) => {\r\n        setError(err.error);\r\n        setUserState({\r\n          isLoggedIn: false\r\n        })\r\n      });\r\n  }, []);\r\n\r\n  const onLogin = (userInfo) => {\r\n    setUserState({\r\n      isLoggedIn: true,\r\n    });\r\n    setUserName(userInfo.userName);\r\n  };\r\n\r\n  const onlogout = () => {\r\n    setUserState({\r\n      isLoggedIn: false\r\n    });\r\n  };\r\n\r\n  let pageBody;\r\n  if(userState.isLoggedIn) {\r\n    pageBody = <Portal userName={userName} error={error} />;\r\n  }\r\n  else {\r\n    pageBody = <Welcome onLogin={onLogin}/>;\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Logout user={userState} onLogout={onlogout} />\r\n      {pageBody}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}